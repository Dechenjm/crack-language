// Copyright 2010 Conrad Steenberg
// Test generic JSON serialization

import crack.io cout, FDWriter, StringWriter, Writer;
import crack.lang cmp, free, die;
@import crack.exp.ann define, export, exporter, implements, interface;
import crack.io Formatter, StringFormatter;
@import crack.vector GenericVector, GenericPrimVector, _getter, NumericVector;
import crack.exp.jsonio JsonFormatter, JsonFormatting;
@import crack.exp.cont.treemap GenericTreeMap;
@import crack.exp.cont.array GenericObjArray, GenericArray;

@GenericObjArray(StringArray, String);
StringArray errors = {};

failed:=false;

@NumericVector(int)
V:=intNumericVector(10);
if (V.count() !=0) errors.append("Initial size of vector is not 0");

V.resize(10);
if (V.count() !=10) errors.append("Updated size of vector is not 10");
V.set(-1);


sw:=StringWriter();
j:=JsonFormatter(sw);

j.format(V);  // Don't use interpolation

// Test JSON output of treemap
@GenericTreeMap(StringIntMap, String, int);
StringIntMap SM = {};
SM['first'] = 100;
SM['second'] = 200;

j.format(SM);

// Test JSON output of Generic Array
StringArray SA = {};

for (item :in SM) {
    StringFormatter fmt = {};
    fmt `$(item.key): $(item.val)`;
    SA.append(fmt.createString());
}

j.format(SA);

expectedResult:="{[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]}{{first: 100, second: 200}}{[\"first: 100\", \"second: 200\"]}";
result:=sw.createString();

if (result==expectedResult)
   cout `ok\n`;
else
   cout `jsonio got unexpected result:\n$result\n`;
