// Copyright 2010 Conrad Steenberg
// Test generic vector class

// Copyright 2010 Conrad Steenberg
// Test generic JSON serialization

import crack.io cout, FDWriter, StringWriter, Writer;
import crack.lang cmp, free, die;
@import crack.exp.ann define, export, exporter, implements, interface;
import crack.io Formatter, StringFormatter;
@import crack.vector GenericVector, GenericPrimVector, _getter, NumericVector;
import crack.exp.jsonio JsonFormatter, JsonFormatting;
@import crack.exp.cont.treemap GenericTreeMap;
@import crack.exp.cont.array GenericObjArray, GenericArray;

@GenericObjArray(StringArray, String);
StringArray errors = {};
errors.append("test");

failed:=false;
uint l=10;
uint c=20;

@NumericVector(int)
V:=intNumericVector(l);
if (V.count() != 0) errors.append("Initial size of vector is not 0");

V.resize(l);
if (V.size() != l) errors.append("Updated size of vector is not 10");
V.set(-1);

for (v :in V)
   if (v != -1) {
      errors.append("Element value is incorrect");
      cout `v=$v\n`;
      break;
   }

V.append(10);

if (V[-1] != 10 || V[10] != 10) errors.append("Appended element value is incorrect");

V[-1] = V[0];
V = V + 1;
V+=-1;

V*=3;

expectedResult:="[-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3]";
fmt:=StringFormatter();
fmt `$V`;
fmtResult:= fmt.createString();

if (fmtResult != expectedResult){
   errors.append("Incorrect formatted output:");
   errors.append(fmtResult);
}

if (errors.count() == 1)
   cout `ok\n`;
else {
   cout `Vector errors found: \n`;
   i:=0;
   for (e :in errors)  if (i++ > 0) cout `  $e\n`;
}
