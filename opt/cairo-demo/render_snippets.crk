# Conrad Steenberg <conrad.steenberg@gmail.com>
# Jan 10, 2011
# Render snippets 

import crack.lang CString, Buffer;
import crack.io cout, StringFormatter;
//~ import crack.container Array, ArrayIter;
import crack.ext._cairo    cairo_surface_t, cairo_t, cairo_image_surface_create,
                           CAIRO_FORMAT_ARGB32, cairo_create, cairo_move_to,
                           cairo_line_to, cairo_rel_line_to,
                           cairo_arc, cairo_rel_curve_to,
                           cairo_close_path, cairo_surface_write_to_png,
                           cairo_surface_flush, cairo_set_line_width,
                           cairo_set_source_rgb, cairo_stroke, cairo_scale,
                           cairo_destroy, cairo_surface_destroy,
                           cairo_pdf_surface_create, cairo_ps_surface_create,
                           cairo_ps_level_to_string,
                           CAIRO_PS_LEVEL_2, CAIRO_PS_LEVEL_3,
                           cairo_svg_surface_create, cairo_svg_version_to_string,
                           CAIRO_SVG_VERSION_1_2;
import crack.lang die, free;
import snippetBase snippetClass;
@import crack.exp.cont.array GenericObjArray, GenericArray, GenericPrimArray;

import arc arcClass, arcNegativeClass;
import clip clipClass, clipImageClass;
import curve curveRectangleClass, curveClass, curveDashClass;
import fill fillStrokeClass, fillStyleClass, fillGradientClass;

int IMAGE_WIDTH = 256;
int IMAGE_HEIGHT = 256;

float X_INCHES = 4;
float Y_INCHES = 4;

int PT_WIDTH = int(X_INCHES * 72.0);
int PT_HEIGHT = int(Y_INCHES * 72.0);

class baseSurface: Object{
   cairo_t cr;
   cairo_surface_t surface;
   uint32 status;
   
   oper init() {}

   void write(){
      cairo_destroy (cr);
      cr=null;
      cairo_surface_destroy (surface);
      surface=null;
   }
}

// PNG surface
class pngSurface:baseSurface{
   CString _fname;
   oper init(StaticString fname, int width, int height)
   {
      surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, width, height);
      cr = cairo_create (surface);
      StringFormatter sout={};
      sout `$(fname).png`;
      tmp:=sout.createCString();
      _fname=CString(sout.createCString());
      cout `fname=$(_fname)\n`;
   }
   
   void write(){
      status = cairo_surface_write_to_png (surface, _fname.buffer);
      baseSurface.write();
   }
}

// PDF surface
class pdfSurface:baseSurface{
   oper init(StaticString fname, int width, int height)
   {
      StringFormatter sout = {};
      sout `$(fname).pdf`;
      int dpi=64;
      surface = cairo_pdf_surface_create (sout.createCString().buffer, width/dpi*72, height/dpi*72);
      cr = cairo_create (surface);
      cout `fname=$(fname).pdf\n`
   }
}


@GenericObjArray(snippetArray, snippetClass);

snippets:=snippetArray(10); // Array of drawing objects
snippets.append(arcClass());
snippets.append(arcNegativeClass());
snippets.append(clipClass());
snippets.append(clipImageClass());
snippets.append(curveRectangleClass());
snippets.append(curveClass());
snippets.append(curveDashClass());
snippets.append(fillStrokeClass());
snippets.append(fillStyleClass());
snippets.append(fillGradientClass());



// Create drawings
for (sn :in snippets){
   pngSurface png = {sn.name, 256, 256};
   sn.draw(png.cr, png.surface);
   png.write();

   pdfSurface pdf = {sn.name, 256, 256};
   sn.draw(pdf.cr, pdf.surface);
   pdf.write();

}

//~ arc:=arcNegativeClass();
//~ png:=pngSurface("arc_negative", IMAGE_WIDTH, IMAGE_HEIGHT);
//~ arc.draw(png.cr, png.surface);
//~ png.write();
//~ pdf:=pdfSurface("arc", PT_WIDTH, PT_HEIGHT);
//~ arc.draw(pdf.cr, pdf.surface);
//~ pdf.write();
cout `ok\n`;
